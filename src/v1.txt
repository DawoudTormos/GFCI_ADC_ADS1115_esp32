#include <Arduino.h>
#include <Adafruit_ADS1X15.h>

// put function declarations here:
int myFunction(int, int);



#define  LED_BUILTIN 2
 Adafruit_ADS1115 ads;  /* Use this for the 16-bit version */
//Adafruit_ADS1015 ads;     /* Use this for the 12-bit version */

// Pin connected to the ALERT/RDY signal for new sample notification.
constexpr int READY_PIN = 19;
constexpr int breaker = 15;

uint32_t count = 0;    
// This is required on ESP32 to put the ISR in IRAM. Define as
// empty for other platforms. Be careful - other platforms may have
// other requirements.




  uint32_t stage1 = millis();
  uint32_t stage2 = millis();
  uint32_t stage3 = millis();

  uint32_t stage1_min = -400;
  uint32_t stage2_min = -600;
  uint32_t stage3_min = -800;

  uint32_t stage1_max = 400;
  uint32_t stage2_max = 600;
  uint32_t stage3_max = 800;


  uint32_t stage1_delay = 320;
  uint32_t stage2_delay = 300;
  uint32_t stage3_delay = 270;


  uint32_t s = 0;
  uint32_t e = 0;

  bool state = true;




  /* Be sure to update this value based on the IC and the gain settings! */
  //float   multiplier = 3.0F;    /* ADS1015 @ +/- 6.144V gain (12-bit results) */
  float multiplier = 0.0078125F; /* ADS1115  @ +/- 6.144V gain (16-bit results) */
  int16_t mmin = 0;
  int16_t mmax = 0;





#ifndef IRAM_ATTR
#define IRAM_ATTR
#endif

volatile bool new_data = false;
void IRAM_ATTR NewDataReadyISR() {
  new_data = true;
}






void setup(void)
{
    pinMode(breaker, OUTPUT);
    pinMode(2, OUTPUT);
      digitalWrite(breaker , !state);

  Serial.begin(250000);
  Serial.println("Hello!");

  Serial.println("Getting differential reading from AIN0 (P) and AIN1 (N)");
  Serial.println("ADC Range: +/- 6.144V (1 bit = 3mV/ADS1015, 0.1875mV/ADS1115)");

  // The ADC input range (or gain) can be changed via the following
  // functions, but be careful never to exceed VDD +0.3V max, or to
  // exceed the upper and lower limits if you adjust the input range!
  // Setting these values incorrectly may destroy your ADC!
  //                                                                ADS1015  ADS1115
  //                                                                -------  -------
  // ads.setGain(GAIN_TWOTHIRDS);  // 2/3x gain +/- 6.144V  1 bit = 3mV      0.1875mV (default)
  // ads.setGain(GAIN_ONE);        // 1x gain   +/- 4.096V  1 bit = 2mV      0.125mV
  // ads.setGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
  // ads.setGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
  // ads.setGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
  ads.setGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
ads.setDataRate(RATE_ADS1115_860SPS);
  if (!ads.begin()) {
    Serial.println("Failed to initialize ADS.");
    while (1);
  }

  pinMode(READY_PIN, INPUT);
  // We get a falling edge every time a new sample is ready.
  attachInterrupt(digitalPinToInterrupt(READY_PIN), NewDataReadyISR, FALLING);

  // Start continuous conversions.
  ads.startADCReading(ADS1X15_REG_CONFIG_MUX_DIFF_0_1, /*continuous=*/true);
}






// each bit is 
void loop(void)
{




if(!state){
  digitalWrite(breaker , !state);//  !state here becaause it conducts at low
  uint32_t s = millis();
  while(millis() - s < 10000){
    digitalWrite(2 , ((uint32_t)(millis() /500)%2 == 0));

  }
  
  state = true;
  mmax = 0;
  mmin = 0;
  digitalWrite(breaker , !state);
  stage1 = millis();
  stage2 = millis();
  stage3 = millis();

}

digitalWrite(2 , ((uint32_t)(millis() /500)%2 == 0));


//Serial.println(s);

  // If we don't have new data, skip this iteration.
  s = millis();
  while(count < 10){
  if (!new_data) {

  }else{
    count++;
    int16_t x = ads.getLastConversionResults();
    if(x < mmin ){
      mmin = x;
    }else if(x > mmax){
      mmax = x;
    }
      new_data = false;


}}
  e = millis();


mmax = mmax/sqrt(2);
mmin = mmin/sqrt(2);


 if(mmax < stage1_max  &&  mmin > stage1_min){
stage1 = millis();
    Serial.print("-");
 }

 if(mmax < stage2_max  &&  mmin > stage2_min){
stage2 = millis();
    Serial.print("-");

 }

  if(mmax < stage3_max &&  mmin > stage3_min ){
stage3 = millis();
    Serial.println("-");

 }


 if(    millis() - stage1 > stage1_delay  ||   millis() - stage2 > stage2_delay  ||    millis() - stage3 > stage3_delay   ){






  state = false;
  


 }  
   Serial.println(".........................");
    Serial.print("s1: "); Serial.println(millis() - stage1);
   Serial.print("s2: "); Serial.println(millis() - stage2);
   Serial.print("s3: "); Serial.println(millis() - stage3);
  Serial.println(".........................");  
  Serial.print("d: "); Serial.println(e - s);
  Serial.print("mmax: "); Serial.println(mmax);
   Serial.print("mmin: "); Serial.println(mmin);
   Serial.print("state: "); Serial.println(state);
   Serial.println(".........................");
 count = 0;
   mmax = 0;
  mmin = 0;



  

    
/*
 
 // Serial.print("Differential: "); Serial.print(results); Serial.print("("); Serial.print(ads.computeVolts(results)); Serial.println("V)");
 Serial.print("Differential: "); Serial.print(results); Serial.print("("); Serial.print(results * multiplier); Serial.println("mV)");Serial.println("count:");  Serial.println(count);        
 
  // In a real application we probably don't want to do a delay here if we are doing interrupt-based sampling, but we have a delay
  // in this example to avoid writing too much data to the serial port.
  delay(200);*/
}







// put function definitions here:
int myFunction(int x, int y) {
  return x + y;
}